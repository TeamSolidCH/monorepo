name: ðŸš€ Publish calendarbot
on:
  pull_request:
    paths:
      - './crates/calendarbot/**'
      - './Cargo.toml'
      - './Cargo.lock'
      - '.github/workflows/publish-calendarbot.yml'
  push:
    tags:
      - calendarbot/v**
    branches:
      - master
    paths:
      - './crates/calendarbot/**'
      - './Cargo.toml'
      - './Cargo.lock'
      - '.github/workflows/publish-calendarbot.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

env:
  IMAGE_NAME: calendarbot
  REPOSITORY_NAME: teamsolidch
  REGISTRY_IMAGE: ghcr.io/teamsolidch/calendarbot

jobs:
  get-version:
    name: Get version
    runs-on: ubuntu-24.04
    outputs: 
      version: ${{ steps.version.outputs.VERSION }}
      tag_latest: ${{ steps.version.outputs.TAG_LATEST }}
    steps:
      -
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - 
        name: Get version
        id: version
        env:
          PR_NUMBER: ${{ github.event.number }}
        run: bash .github/scripts/get-version.sh

  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            rust_target: x86_64-unknown-linux-gnu
          - platform: linux/arm64
            rust_target: aarch64-unknown-linux-gnu
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Prepare
        run: |
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.rust_target }}

      - name: Setup caching
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.rust_target }}

      - name: Install compiler tools (as we're cross-compiling)
        if: matrix.rust_target == 'aarch64-unknown-linux-gnu'
        run: sudo apt install -y gcc-aarch64-linux-gnu

      - name: Build release artifact
        id: build-rust
        run: |
          if [[ "${{ matrix.rust_target }}" == "aarch64-unknown-linux-gnu" ]]; then 
                cargo build --release --target aarch64-unknown-linux-gnu --bin calendarbot 
                echo "path=./target/aarch64-unknown-linux-gnu/release/calendarbot" >> $GITHUB_OUTPUT 
            else
              cargo build --release --bin calendarbot
              echo "path=./target/release/calendarbot" >> $GITHUB_OUTPUT
          fi

      - name: Sed dockerfile
        run: sed -i 's@<TARGETDIR>@${{ steps.build-rust.outputs.path }}@g' crates/calendarbot/Dockerfile

      - name: Build an push by digest
        id: build
        run:  docker buildx build
              --platform=${{ matrix.platform }}
              --file=crates/calendarbot/Dockerfile
              --cache-from=type=gha,scope=${{ env.REGISTRY_IMAGE }}-${{ github.ref_name }}-${{ matrix.platform }}
              --cache-to=type=gha,scope=${{ env.REGISTRY_IMAGE }}-${{ github.ref_name }}-${{ matrix.platform }}
              --output=type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
              --metadata-file metadata.json .

      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          cat metadata.json
          cat metadata.json | jq -r '."containerimage.digest"'
          digest="$(cat metadata.json | jq -r '."containerimage.digest"')"
          touch "/tmp/digests/${digest#sha256:}"          
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
      - get-version
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Get is latest
        id: latest
        run: echo "tag_latest=$TAG_LATEST" >> $GITHUB_OUTPUT
        env:
          TAG_LATEST: ${{ needs.get-version.outputs.tag_latest }}
      
      - name: Create manifest list and push
        if: steps.latest.outputs.tag_latest != 'true'
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ needs.get-version.outputs.version }} \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      - name: Create manifest list and push (latest)
        if: steps.latest.outputs.tag_latest == 'true'
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create -t ${{ env.REGISTRY_IMAGE }}:${{ needs.get-version.outputs.version }} -t ${{ env.REGISTRY_IMAGE }}:latest \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)

      
      - name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ needs.get-version.outputs.version }}
