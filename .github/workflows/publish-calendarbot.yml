name: ðŸš€ Publish calendarbot
on:
  pull_request:
    # paths: UNCOMMENT WHEN IT IS WORKING
    #   - './crates/calendarbot'
    #   - './Cargo.toml'
    #   - './Cargo.lock'
    #   - './.moon/'
    #   - './flake.nix'
    #   - './flake.lock'
  push:
    tags:
      - calendarbot/v**

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false

env:
  IMAGE_NAME: calendarbot
  REPOSITORY_NAME: teamsolidch

jobs:
  build-deploy:
    name: Build & Publish
    runs-on: ubuntu-24.04
    steps:
      -
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      -
        name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.0.0
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - 
        uses: cachix/install-nix-action@v26
      -
        uses: cachix/cachix-action@v14
        with:
          name: yoyozbi-ci-cache
          authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      - 
        name: Build env
        run: 'nix develop --impure --accept-flake-config --command bash -c "echo hello" #.'
      - name: Get version
        id: version
        run: |
          push_string="push"
          if [[ "$GITHUB_EVENT_NAME" == "$push_string" ]]
          then
            echo "Run for tag"
            tag_name=$GITHUB_REF_NAME
            echo "Tag name: $tag_name"
            VERSION=$(echo $STRING | rev | cut -d'/' -f1 | rev)
            echo "Got version: $VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "Run for pull_request" 
            branch_name=$($(echo ${GITHUB_REF_NAME#*-} | cut -c -10)
            echo "Got pre-release: $branch_name.0" 
            expected_version="${{ steps.previoustag.ouputs.tag }}-$branch_name"
            echo "Checking if there is already a tag"
            TAGS=$(curl -s "https://ghcr.io/v2/${{ env.REPOSITORY_NAME }}/${{ env.IMAGE_NAME }}/tags/list" | jq -r '.tags[]')
            FILTERED_TAGS=$(echo "$TAGS" | grep -E "^$expected_version.[0-9]+$")
            
            # Check if any filtered tags were found
            if [ -z "$FILTERED_TAGS" ]; then
             # Default to 1 if no matching tags were found
             NEW_VERSION=1
            else
              # Find the latest tag with the highest version number
              LATEST_TAG=$(echo "$FILTERED_TAGS" | sort -V | tail -n 1)
              # Extract the version number from the latest tag
              VERSION=$(echo $LATEST_TAG | sed "s/^$expected_version.\([0-9]*\)$/\1/")

              # Increment the version number
              NEW_VERSION=$((VERSION + 1))
            fi
             VERSION="$expected_version.$NEW_VERSION"
             echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          fi


